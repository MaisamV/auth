openapi: 3.0.3
info:
  title: OAuth 2.0 Authentication Microservice
  description: |
    A robust, scalable, and secure Authentication Microservice built in Go. 
    It implements the OAuth 2.0 framework and follows Clean Architecture principles 
    to provide a centralized identity and access management solution.
  version: 1.0.0
  contact:
    name: Auth Service Team
    email: auth-team@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://auth.example.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: auth-service

  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: password123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: user_123
                  email:
                    type: string
                    example: user@example.com
                  session_token:
                    type: string
                    description: JWT session token (1 hour expiry)
                  session_refresh_token:
                    type: string
                    description: JWT refresh token (6 months expiry)
                  session_token_expires_at:
                    type: string
                    format: date-time
                    description: UTC expiration time of the session token in RFC3339 format
                    example: "2024-01-15T14:30:00Z"
        '400':
          description: Bad request (invalid email, weak password, etc.)
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user with email and password, sets session (1 hour) and refresh token (6 months) cookies
      security: []  # No authentication required for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: Session and refresh token cookies
              schema:
                type: string
                example: session_token=jwt_token; session_refresh_token=refresh_jwt; Path=/; HttpOnly; SameSite=Lax
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: user_123
                  email:
                    type: string
                    example: user@example.com
                  session_token:
                    type: string
                    description: JWT session token (1 hour expiry)
                  session_refresh_token:
                    type: string
                    description: JWT refresh token (6 months expiry)
                  session_token_expires_at:
                    type: string
                    format: date-time
                    description: UTC expiration time of the session token in RFC3339 format
                    example: "2024-01-15T14:30:00Z"
        '401':
          description: Invalid credentials
        '400':
          description: Bad request (invalid email format, etc.)

  /auth/refresh:
    post:
      summary: Refresh session token
      description: Refreshes an expired session token using a refresh token from cookies
      security: []  # No authentication required - uses refresh token from cookie
      responses:
        '200':
          description: Session refreshed successfully
          headers:
            Set-Cookie:
              description: New session and refresh token cookies
              schema:
                type: string
                example: session_token=new_token; Path=/; HttpOnly; SameSite=Lax; Max-Age=3600
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_token:
                    type: string
                    description: New session token
                  session_refresh_token:
                    type: string
                    description: New refresh token
                  session_token_expires_at:
                    type: string
                    format: date-time
                    description: UTC expiration time of the session token in RFC3339 format
                    example: "2024-01-15T14:30:00Z"
        '401':
          description: Invalid or missing refresh token
        '400':
          description: Bad request

  /auth/logout:
    post:
      summary: User logout
      description: Logs out the user by clearing session and refresh token cookies
      security: []  # No authentication required for logout
      responses:
        '200':
          description: Logout successful
          headers:
            Set-Cookie:
              description: Cleared session cookies
              schema:
                type: string
                example: session_token=; Path=/; HttpOnly; SameSite=Lax; Max-Age=-1
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
        '405':
          description: Method not allowed

  /auth/change-password:
    post:
      summary: Change user password
      description: Changes the authenticated user's password and revokes all their tokens
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  description: User's current password
                  example: oldpassword123
                new_password:
                  type: string
                  minLength: 8
                  description: New password (minimum 8 characters)
                  example: newpassword123
      responses:
        '200':
          description: Password changed successfully
          headers:
            Set-Cookie:
              description: Cleared session cookies to force re-authentication
              schema:
                type: string
                example: session_token=; Path=/; HttpOnly; SameSite=Strict; Max-Age=-1
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully. Please log in again.
        '400':
          description: Bad request (current password incorrect, new password too weak, etc.)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Current password is incorrect
        '401':
          description: Authentication required or invalid session token
        '500':
          description: Internal server error

  /oauth/authorize:
    get:
      summary: OAuth 2.0 authorization endpoint
      description: Initiates the authorization code flow
      security: []  # No authentication required - handles session internally
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          example: web-app-client
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          example: http://localhost:3000/callback
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          example: code
        - name: scope
          in: query
          schema:
            type: string
          example: read write
        - name: state
          in: query
          schema:
            type: string
          example: random-state-string
        - name: code_challenge
          in: query
          schema:
            type: string
          description: PKCE code challenge
        - name: code_challenge_method
          in: query
          schema:
            type: string
            enum: [plain, S256]
          description: PKCE code challenge method
      responses:
        '302':
          description: Redirect to client with authorization code
        '400':
          description: Invalid request parameters
        '401':
          description: User not authenticated

  /oauth/token:
    post:
      summary: OAuth 2.0 token endpoint
      description: Exchange authorization code, refresh token, or credentials for access token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token, client_credentials, password]
                client_id:
                  type: string
                client_secret:
                  type: string
                code:
                  type: string
                  description: Required for authorization_code grant
                redirect_uri:
                  type: string
                  description: Required for authorization_code grant
                code_verifier:
                  type: string
                  description: Required for PKCE
                refresh_token:
                  type: string
                  description: Required for refresh_token grant
                username:
                  type: string
                  description: Required for password grant
                password:
                  type: string
                  description: Required for password grant
                scope:
                  type: string
      responses:
        '200':
          description: Token issued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 900
                  refresh_token:
                    type: string
                  scope:
                    type: string
        '400':
          description: Invalid request
        '401':
          description: Invalid client credentials

  /oauth/revoke:
    post:
      summary: OAuth 2.0 token revocation endpoint
      description: Revoke a refresh token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: The token to revoke
                token_type_hint:
                  type: string
                  enum: [refresh_token, access_token]
                client_id:
                  type: string
                client_secret:
                  type: string
      responses:
        '200':
          description: Token revoked successfully
        '400':
          description: Invalid request
        '401':
          description: Invalid client credentials

  /.well-known/jwks.json:
    get:
      summary: JSON Web Key Set endpoint
      description: Returns the public keys for JWT verification
      responses:
        '200':
          description: JWKS response
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          example: EC
                        use:
                          type: string
                          example: sig
                        kid:
                          type: string
                          example: "1"
                        alg:
                          type: string
                          example: EdDSA
                        crv:
                          type: string
                          example: Ed25519
                          description: Ed25519 curve name
                        x:
                          type: string
                          description: Ed25519 public key (base64url encoded)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
        error_uri:
          type: string
          format: uri

security:
  - BearerAuth: []
  - BasicAuth: []